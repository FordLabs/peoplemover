buildscript {
  ext.kotlin_version = '1.6.10'
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
  id 'java'
  id 'org.springframework.boot' version '2.6.6'

  id 'org.jetbrains.kotlin.plugin.jpa' version "$kotlin_version"
  id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"

  id 'com.gorylenko.gradle-git-properties' version "2.4.0"

  id 'org.sonarqube' version '2.8'
  id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'

group = 'com.ford'
archivesBaseName = 'PeopleMover'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

gitProperties {
  branch = System.getenv('HEAD_BRANCH')
}

repositories {
  mavenCentral()
}

dependencies {
  annotationProcessor 'org.projectlombok:lombok:1.18.10'
  compileOnly 'org.projectlombok:lombok:1.18.10'

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.flywaydb:flyway-core:5.2.4'
  implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
  implementation 'io.jsonwebtoken:jjwt:0.9.1'
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

  runtimeOnly 'mysql:mysql-connector-java:8.0.25'
  runtimeOnly 'com.h2database:h2:1.4.200'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation "io.mockk:mockk:1.11.0"
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
    csv.required = false
    html.required = false
  }
}

sonarqube {
  properties {
    property "sonar.coverage.jacoco.reportPath", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

test {
  useJUnitPlatform()
}

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "11"
  }
}
compileTestKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "11"
  }
}
